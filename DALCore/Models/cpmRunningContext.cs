// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace DALCore.Models;

public partial class cpmRunningContext : DbContext
{
    public cpmRunningContext()
    {
    }

    public cpmRunningContext(DbContextOptions<cpmRunningContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Activity> Activity { get; set; }

    public virtual DbSet<ActivityGroup> ActivityGroup { get; set; }

    public virtual DbSet<AspNetRoles1> AspNetRoles1 { get; set; }

    public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }

    public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }

    public virtual DbSet<AspNetUsers1> AspNetUsers1 { get; set; }

    public virtual DbSet<AspnetApplications> AspnetApplications { get; set; }

    public virtual DbSet<AspnetMembership> AspnetMembership { get; set; }

    public virtual DbSet<AspnetPaths> AspnetPaths { get; set; }

    public virtual DbSet<AspnetPersonalizationAllUsers> AspnetPersonalizationAllUsers { get; set; }

    public virtual DbSet<AspnetPersonalizationPerUser> AspnetPersonalizationPerUser { get; set; }

    public virtual DbSet<AspnetProfile> AspnetProfile { get; set; }

    public virtual DbSet<AspnetRoles> AspnetRoles { get; set; }

    public virtual DbSet<AspnetSchemaVersions> AspnetSchemaVersions { get; set; }

    public virtual DbSet<AspnetUsers> AspnetUsers { get; set; }

    public virtual DbSet<AspnetWebEventEvents> AspnetWebEventEvents { get; set; }

    public virtual DbSet<BadWeatherDays> BadWeatherDays { get; set; }

    public virtual DbSet<ChangeOrder> ChangeOrder { get; set; }

    public virtual DbSet<ChangeOrderDetail> ChangeOrderDetail { get; set; }

    public virtual DbSet<ClientAccount> ClientAccount { get; set; }

    public virtual DbSet<ClientContacts> ClientContacts { get; set; }

    public virtual DbSet<ClientGift> ClientGift { get; set; }

    public virtual DbSet<ClientOwnerType> ClientOwnerType { get; set; }

    public virtual DbSet<ClientPoa> ClientPoa { get; set; }

    public virtual DbSet<CompanyContacts> CompanyContacts { get; set; }

    public virtual DbSet<CompanyDepartments> CompanyDepartments { get; set; }

    public virtual DbSet<CompanyInfo> CompanyInfo { get; set; }

    public virtual DbSet<Contract> Contract { get; set; }

    public virtual DbSet<ContractActivity> ContractActivity { get; set; }

    public virtual DbSet<Country> Country { get; set; }

    public virtual DbSet<IncommingInvoiceDetail> IncommingInvoiceDetail { get; set; }

    public virtual DbSet<IncommingInvoices> IncommingInvoices { get; set; }

    public virtual DbSet<InsuranceCompanies> InsuranceCompanies { get; set; }

    public virtual DbSet<Insurances> Insurances { get; set; }

    public virtual DbSet<Invoices> Invoices { get; set; }

    public virtual DbSet<InvoicesDetails> InvoicesDetails { get; set; }

    public virtual DbSet<InvoicingPaymentGroup> InvoicingPaymentGroup { get; set; }

    public virtual DbSet<InvoicingPaymentStages> InvoicingPaymentStages { get; set; }

    public virtual DbSet<MigrationHistory> MigrationHistory { get; set; }

    public virtual DbSet<Permission> Permission { get; set; }

    public virtual DbSet<PermissionPerUser> PermissionPerUser { get; set; }

    public virtual DbSet<PostalCode> PostalCode { get; set; }

    public virtual DbSet<Project> Project { get; set; }

    public virtual DbSet<ProjectBudget> ProjectBudget { get; set; }

    public virtual DbSet<ProjectDocs> ProjectDocs { get; set; }

    public virtual DbSet<ProjectLevels> ProjectLevels { get; set; }

    public virtual DbSet<ProjectNews> ProjectNews { get; set; }

    public virtual DbSet<ProjectPictures> ProjectPictures { get; set; }

    public virtual DbSet<ProjectSalesSettings> ProjectSalesSettings { get; set; }

    public virtual DbSet<ProjectStatus> ProjectStatus { get; set; }

    public virtual DbSet<Provincie> Provincie { get; set; }

    public virtual DbSet<Setting> Setting { get; set; }

    public virtual DbSet<UnitConstructionValue> UnitConstructionValue { get; set; }

    public virtual DbSet<UnitGroupTypes> UnitGroupTypes { get; set; }

    public virtual DbSet<UnitRooms> UnitRooms { get; set; }

    public virtual DbSet<UnitTypes> UnitTypes { get; set; }

    public virtual DbSet<Units> Units { get; set; }

    public virtual DbSet<UserCompany> UserCompany { get; set; }

    public virtual DbSet<Users> Users { get; set; }

    public virtual DbSet<UtilityPercentage> UtilityPercentage { get; set; }

    public virtual DbSet<VacationDays> VacationDays { get; set; }

    public virtual DbSet<Vattype> Vattype { get; set; }

    public virtual DbSet<WheaterStations> WheaterStations { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=SERVER\\SQLEXPRESS;Initial Catalog=cpmRunning;User ID=lataire;Password=840683;Connect Timeout=500;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("SQL_Latin1_General_CP1_CI_AS");

        modelBuilder.Entity<Activity>(entity =>
        {
            entity.Property(e => e.ActivityId).HasColumnName("ActivityID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.Omschrijving).HasMaxLength(250);

            entity.HasOne(d => d.Group).WithMany(p => p.Activities)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Activity_ActivityGroup");
        });

        modelBuilder.Entity<ActivityGroup>(entity =>
        {
            entity.HasKey(e => e.GroupId);

            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.Lot).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<AspNetRoles1>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AspNetRoles");

            entity.ToTable("AspNetRoles");

            entity.HasIndex(e => e.Name, "RoleNameIndex").IsUnique();

            entity.Property(e => e.Id).HasMaxLength(128);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(256);
        });

        modelBuilder.Entity<AspNetUserClaims>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AspNetUserClaims");

            entity.HasIndex(e => e.UserId, "IX_UserId");

            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(128);

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserClaims)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId");
        });

        modelBuilder.Entity<AspNetUserLogins>(entity =>
        {
            entity.HasKey(e => new { e.LoginProvider, e.ProviderKey, e.UserId }).HasName("PK_dbo.AspNetUserLogins");

            entity.HasIndex(e => e.UserId, "IX_UserId");

            entity.Property(e => e.LoginProvider).HasMaxLength(128);
            entity.Property(e => e.ProviderKey).HasMaxLength(128);
            entity.Property(e => e.UserId).HasMaxLength(128);

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserLogins)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId");
        });

        modelBuilder.Entity<AspNetUsers1>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AspNetUsers");

            entity.ToTable("AspNetUsers");

            entity.HasIndex(e => e.UserName, "UserNameIndex").IsUnique();

            entity.Property(e => e.Id).HasMaxLength(128);
            entity.Property(e => e.Email).HasMaxLength(256);
            entity.Property(e => e.LockoutEndDateUtc).HasColumnType("datetime");
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(256);

            entity.HasMany(d => d.Role).WithMany(p => p.User)
                .UsingEntity<Dictionary<string, object>>(
                    "AspNetUserRoles",
                    r => r.HasOne<AspNetRoles1>().WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId"),
                    l => l.HasOne<AspNetUsers1>().WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId"),
                    j =>
                    {
                        j.HasKey("UserId", "RoleId").HasName("PK_dbo.AspNetUserRoles");
                        j.HasIndex(new[] { "RoleId" }, "IX_RoleId");
                        j.HasIndex(new[] { "UserId" }, "IX_UserId");
                        j.IndexerProperty<string>("UserId").HasMaxLength(128);
                        j.IndexerProperty<string>("RoleId").HasMaxLength(128);
                    });
        });

        modelBuilder.Entity<AspnetApplications>(entity =>
        {
            entity.HasKey(e => e.ApplicationId)
                .HasName("PK__aspnet_A__C93A4C982E3BD7D3")
                .IsClustered(false);

            entity.ToTable("aspnet_Applications");

            entity.HasIndex(e => e.LoweredApplicationName, "UQ__aspnet_A__17477DE43118447E").IsUnique();

            entity.HasIndex(e => e.ApplicationName, "UQ__aspnet_A__3091033133F4B129").IsUnique();

            entity.HasIndex(e => e.LoweredApplicationName, "aspnet_Applications_Index").IsClustered();

            entity.Property(e => e.ApplicationId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ApplicationName)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.Description).HasMaxLength(256);
            entity.Property(e => e.LoweredApplicationName)
                .IsRequired()
                .HasMaxLength(256);
        });

        modelBuilder.Entity<AspnetMembership>(entity =>
        {
            entity.HasKey(e => e.UserId)
                .HasName("PK__aspnet_M__1788CC4D4CC05EF3")
                .IsClustered(false);

            entity.ToTable("aspnet_Membership");

            entity.HasIndex(e => new { e.ApplicationId, e.LoweredEmail }, "aspnet_Membership_index").IsClustered();

            entity.Property(e => e.UserId).ValueGeneratedNever();
            entity.Property(e => e.Comment).HasColumnType("ntext");
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(256);
            entity.Property(e => e.FailedPasswordAnswerAttemptWindowStart).HasColumnType("datetime");
            entity.Property(e => e.FailedPasswordAttemptWindowStart).HasColumnType("datetime");
            entity.Property(e => e.LastLockoutDate).HasColumnType("datetime");
            entity.Property(e => e.LastLoginDate).HasColumnType("datetime");
            entity.Property(e => e.LastPasswordChangedDate).HasColumnType("datetime");
            entity.Property(e => e.LoweredEmail).HasMaxLength(256);
            entity.Property(e => e.MobilePin)
                .HasMaxLength(16)
                .HasColumnName("MobilePIN");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(128);
            entity.Property(e => e.PasswordAnswer).HasMaxLength(128);
            entity.Property(e => e.PasswordQuestion).HasMaxLength(256);
            entity.Property(e => e.PasswordSalt)
                .IsRequired()
                .HasMaxLength(128);

            entity.HasOne(d => d.Application).WithMany(p => p.AspnetMembership)
                .HasForeignKey(d => d.ApplicationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__aspnet_Me__Appli__4EA8A765");

            entity.HasOne(d => d.User).WithOne(p => p.AspnetMembership)
                .HasForeignKey<AspnetMembership>(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__aspnet_Me__UserI__4F9CCB9E");
        });

        modelBuilder.Entity<AspnetPaths>(entity =>
        {
            entity.HasKey(e => e.PathId)
                .HasName("PK__aspnet_P__CD67DC5805F8DC4F")
                .IsClustered(false);

            entity.ToTable("aspnet_Paths");

            entity.HasIndex(e => new { e.ApplicationId, e.LoweredPath }, "aspnet_Paths_index")
                .IsUnique()
                .IsClustered();

            entity.Property(e => e.PathId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.LoweredPath)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.Path)
                .IsRequired()
                .HasMaxLength(256);

            entity.HasOne(d => d.Application).WithMany(p => p.AspnetPaths)
                .HasForeignKey(d => d.ApplicationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__aspnet_Pa__Appli__07E124C1");
        });

        modelBuilder.Entity<AspnetPersonalizationAllUsers>(entity =>
        {
            entity.HasKey(e => e.PathId).HasName("PK__aspnet_P__CD67DC590D99FE17");

            entity.ToTable("aspnet_PersonalizationAllUsers");

            entity.Property(e => e.PathId).ValueGeneratedNever();
            entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.PageSettings)
                .IsRequired()
                .HasColumnType("image");

            entity.HasOne(d => d.Path).WithOne(p => p.AspnetPersonalizationAllUsers)
                .HasForeignKey<AspnetPersonalizationAllUsers>(d => d.PathId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__aspnet_Pe__PathI__0F824689");
        });

        modelBuilder.Entity<AspnetPersonalizationPerUser>(entity =>
        {
            entity.HasKey(e => e.Id)
                .HasName("PK__aspnet_P__3214EC06125EB334")
                .IsClustered(false);

            entity.ToTable("aspnet_PersonalizationPerUser");

            entity.HasIndex(e => new { e.PathId, e.UserId }, "aspnet_PersonalizationPerUser_index1")
                .IsUnique()
                .IsClustered();

            entity.HasIndex(e => new { e.UserId, e.PathId }, "aspnet_PersonalizationPerUser_ncindex2").IsUnique();

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.PageSettings)
                .IsRequired()
                .HasColumnType("image");

            entity.HasOne(d => d.Path).WithMany(p => p.AspnetPersonalizationPerUser)
                .HasForeignKey(d => d.PathId)
                .HasConstraintName("FK__aspnet_Pe__PathI__153B1FDF");

            entity.HasOne(d => d.User).WithMany(p => p.AspnetPersonalizationPerUser)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__aspnet_Pe__UserI__162F4418");
        });

        modelBuilder.Entity<AspnetProfile>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__aspnet_P__1788CC4C63A3C44B");

            entity.ToTable("aspnet_Profile");

            entity.Property(e => e.UserId).ValueGeneratedNever();
            entity.Property(e => e.LastUpdatedDate).HasColumnType("datetime");
            entity.Property(e => e.PropertyNames)
                .IsRequired()
                .HasColumnType("ntext");
            entity.Property(e => e.PropertyValuesBinary)
                .IsRequired()
                .HasColumnType("image");
            entity.Property(e => e.PropertyValuesString)
                .IsRequired()
                .HasColumnType("ntext");

            entity.HasOne(d => d.User).WithOne(p => p.AspnetProfile)
                .HasForeignKey<AspnetProfile>(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__aspnet_Pr__UserI__658C0CBD");
        });

        modelBuilder.Entity<AspnetRoles>(entity =>
        {
            entity.HasKey(e => e.RoleId)
                .HasName("PK__aspnet_R__8AFACE1B6F1576F7")
                .IsClustered(false);

            entity.ToTable("aspnet_Roles");

            entity.HasIndex(e => new { e.ApplicationId, e.LoweredRoleName }, "aspnet_Roles_index1")
                .IsUnique()
                .IsClustered();

            entity.Property(e => e.RoleId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Description).HasMaxLength(256);
            entity.Property(e => e.LoweredRoleName)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(256);

            entity.HasOne(d => d.Application).WithMany(p => p.AspnetRoles)
                .HasForeignKey(d => d.ApplicationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__aspnet_Ro__Appli__70FDBF69");
        });

        modelBuilder.Entity<AspnetSchemaVersions>(entity =>
        {
            entity.HasKey(e => new { e.Feature, e.CompatibleSchemaVersion }).HasName("PK__aspnet_S__5A1E6BC1405A880E");

            entity.ToTable("aspnet_SchemaVersions");

            entity.Property(e => e.Feature).HasMaxLength(128);
            entity.Property(e => e.CompatibleSchemaVersion).HasMaxLength(128);
        });

        modelBuilder.Entity<AspnetUsers>(entity =>
        {
            entity.HasKey(e => e.UserId)
                .HasName("PK__aspnet_U__1788CC4D38B96646")
                .IsClustered(false);

            entity.ToTable("aspnet_Users");

            entity.HasIndex(e => new { e.ApplicationId, e.LoweredUserName }, "aspnet_Users_Index")
                .IsUnique()
                .IsClustered();

            entity.HasIndex(e => new { e.ApplicationId, e.LastActivityDate }, "aspnet_Users_Index2");

            entity.Property(e => e.UserId).HasDefaultValueSql("(newid())");
            entity.Property(e => e.LastActivityDate).HasColumnType("datetime");
            entity.Property(e => e.LoweredUserName)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.MobileAlias)
                .HasMaxLength(16)
                .HasDefaultValueSql("(NULL)");
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(256);

            entity.HasOne(d => d.Application).WithMany(p => p.AspnetUsers)
                .HasForeignKey(d => d.ApplicationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__aspnet_Us__Appli__3AA1AEB8");

            entity.HasMany(d => d.Role).WithMany(p => p.User)
                .UsingEntity<Dictionary<string, object>>(
                    "AspnetUsersInRoles",
                    r => r.HasOne<AspnetRoles>().WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__aspnet_Us__RoleI__77AABCF8"),
                    l => l.HasOne<AspnetUsers>().WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK__aspnet_Us__UserI__76B698BF"),
                    j =>
                    {
                        j.HasKey("UserId", "RoleId").HasName("PK__aspnet_U__AF2760AD74CE504D");
                        j.ToTable("aspnet_UsersInRoles");
                        j.HasIndex(new[] { "RoleId" }, "aspnet_UsersInRoles_index");
                    });
        });

        modelBuilder.Entity<AspnetWebEventEvents>(entity =>
        {
            entity.HasKey(e => e.EventId).HasName("PK__aspnet_W__7944C8102665ABE1");

            entity.ToTable("aspnet_WebEvent_Events");

            entity.Property(e => e.EventId)
                .HasMaxLength(32)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.ApplicationPath).HasMaxLength(256);
            entity.Property(e => e.ApplicationVirtualPath).HasMaxLength(256);
            entity.Property(e => e.Details).HasColumnType("ntext");
            entity.Property(e => e.EventOccurrence).HasColumnType("decimal(19, 0)");
            entity.Property(e => e.EventSequence).HasColumnType("decimal(19, 0)");
            entity.Property(e => e.EventTime).HasColumnType("datetime");
            entity.Property(e => e.EventTimeUtc).HasColumnType("datetime");
            entity.Property(e => e.EventType)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.ExceptionType).HasMaxLength(256);
            entity.Property(e => e.MachineName)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.Message).HasMaxLength(1024);
            entity.Property(e => e.RequestUrl).HasMaxLength(1024);
        });

        modelBuilder.Entity<BadWeatherDays>(entity =>
        {
            entity.HasOne(d => d.Weatherstation).WithMany(p => p.BadWeatherDays)
                .HasForeignKey(d => d.WeatherstationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BadWeatherDays_WheaterStations");
        });

        modelBuilder.Entity<ChangeOrder>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.ChangeOrderConditions).HasMaxLength(1000);
            entity.Property(e => e.ClientAccountId).HasColumnName("ClientAccountID");
            entity.Property(e => e.ContractActivityId).HasColumnName("ContractActivityID");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(250);

            entity.HasOne(d => d.ClientAccount).WithMany(p => p.ChangeOrder)
                .HasForeignKey(d => d.ClientAccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ChangeOrder_ClientAccount");

            entity.HasOne(d => d.ContractActivity).WithMany(p => p.ChangeOrder)
                .HasForeignKey(d => d.ContractActivityId)
                .HasConstraintName("FK_ChangeOrder_ContractActivity");
        });

        modelBuilder.Entity<ChangeOrderDetail>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.ChangeOrderId).HasColumnName("ChangeOrderID");
            entity.Property(e => e.Commission).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.Price).HasColumnType("decimal(19, 4)");

            entity.HasOne(d => d.ChangeOrder).WithMany(p => p.ChangeOrderDetail)
                .HasForeignKey(d => d.ChangeOrderId)
                .HasConstraintName("FK_ChangeOrderDetail_ChangeOrder");
        });

        modelBuilder.Entity<ClientAccount>(entity =>
        {
            entity.Property(e => e.BankAccountNumber).HasMaxLength(50);
            entity.Property(e => e.Busnumber).HasMaxLength(10);
            entity.Property(e => e.CompanyName).HasMaxLength(100);
            entity.Property(e => e.DeliveryDoc).HasMaxLength(100);
            entity.Property(e => e.Housenumber).HasMaxLength(10);
            entity.Property(e => e.InvoiceBusnumber).HasMaxLength(10);
            entity.Property(e => e.InvoiceHousenumber).HasMaxLength(10);
            entity.Property(e => e.InvoiceStreet).HasMaxLength(250);
            entity.Property(e => e.Name).HasMaxLength(200);
            entity.Property(e => e.PostalCodeId).HasColumnName("PostalCodeID");
            entity.Property(e => e.Salutation).HasMaxLength(50);
            entity.Property(e => e.Street).HasMaxLength(250);
            entity.Property(e => e.Vatnumber)
                .HasMaxLength(50)
                .HasColumnName("VATnumber");

            entity.HasOne(d => d.InvoicePostalCode).WithMany(p => p.ClientAccountInvoicePostalCode)
                .HasForeignKey(d => d.InvoicePostalCodeId)
                .HasConstraintName("FK_ClientAccount_PostalCode1");

            entity.HasOne(d => d.OwnerType).WithMany(p => p.ClientAccount)
                .HasForeignKey(d => d.OwnerTypeId)
                .HasConstraintName("FK_ClientAccount_ClientOwnerType");

            entity.HasOne(d => d.PostalCode).WithMany(p => p.ClientAccountPostalCode)
                .HasForeignKey(d => d.PostalCodeId)
                .HasConstraintName("FK_ClientAccount_PostalCode");
        });

        modelBuilder.Entity<ClientContacts>(entity =>
        {
            entity.Property(e => e.Busnumber).HasMaxLength(10);
            entity.Property(e => e.Cellphone).HasMaxLength(50);
            entity.Property(e => e.ClientAccountId).HasColumnName("ClientAccountID");
            entity.Property(e => e.CoOwnerPercentage).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.CoOwnerTypeId).HasColumnName("CoOwnerTypeID");
            entity.Property(e => e.CompanyName).HasMaxLength(200);
            entity.Property(e => e.Email).HasMaxLength(300);
            entity.Property(e => e.Forename).HasMaxLength(200);
            entity.Property(e => e.Housenumber).HasMaxLength(10);
            entity.Property(e => e.InvoiceBusnumber).HasMaxLength(10);
            entity.Property(e => e.InvoiceHousenumber).HasMaxLength(10);
            entity.Property(e => e.InvoicePostalCodeId).HasColumnName("InvoicePostalCodeID");
            entity.Property(e => e.InvoiceStreet).HasMaxLength(250);
            entity.Property(e => e.Name).HasMaxLength(200);
            entity.Property(e => e.Phone).HasMaxLength(50);
            entity.Property(e => e.PostalCodeId).HasColumnName("PostalCodeID");
            entity.Property(e => e.Salutation).HasMaxLength(50);
            entity.Property(e => e.Street).HasMaxLength(250);
            entity.Property(e => e.Vatnumber)
                .HasMaxLength(50)
                .HasColumnName("VATnumber");

            entity.HasOne(d => d.ClientAccount).WithMany(p => p.ClientContacts)
                .HasForeignKey(d => d.ClientAccountId)
                .HasConstraintName("FK_ClientContacts_ClientAccount");

            entity.HasOne(d => d.CoOwnerType).WithMany(p => p.ClientContacts)
                .HasForeignKey(d => d.CoOwnerTypeId)
                .HasConstraintName("FK_ClientContacts_ClientOwnerType");

            entity.HasOne(d => d.InvoicePostalCode).WithMany(p => p.ClientContactsInvoicePostalCode)
                .HasForeignKey(d => d.InvoicePostalCodeId)
                .HasConstraintName("FK_ClientContacts_PostalCode1");

            entity.HasOne(d => d.PostalCode).WithMany(p => p.ClientContactsPostalCode)
                .HasForeignKey(d => d.PostalCodeId)
                .HasConstraintName("FK_ClientContacts_PostalCode");
        });

        modelBuilder.Entity<ClientGift>(entity =>
        {
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(1000);

            entity.HasOne(d => d.ClientAccount).WithMany(p => p.ClientGift)
                .HasForeignKey(d => d.ClientAccountId)
                .HasConstraintName("FK_ClientGift_ClientAccount");

            entity.HasMany(d => d.Activity).WithMany(p => p.Gift)
                .UsingEntity<Dictionary<string, object>>(
                    "ClientGiftActivity",
                    r => r.HasOne<Activity>().WithMany()
                        .HasForeignKey("ActivityId")
                        .HasConstraintName("FK_ClientGiftActivity_Activity"),
                    l => l.HasOne<ClientGift>().WithMany()
                        .HasForeignKey("GiftId")
                        .HasConstraintName("FK_ClientGiftActivity_ClientGift"),
                    j =>
                    {
                        j.HasKey("GiftId", "ActivityId");
                    });
        });

        modelBuilder.Entity<ClientOwnerType>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<ClientPoa>(entity =>
        {
            entity.ToTable("ClientPOA");

            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(1000);

            entity.HasOne(d => d.ClientAccount).WithMany(p => p.ClientPoa)
                .HasForeignKey(d => d.ClientAccountId)
                .HasConstraintName("FK_ClientPOA_ClientAccount");

            entity.HasMany(d => d.Activity).WithMany(p => p.Poa)
                .UsingEntity<Dictionary<string, object>>(
                    "ClientPoaactivity",
                    r => r.HasOne<Activity>().WithMany()
                        .HasForeignKey("ActivityId")
                        .HasConstraintName("FK_ClientPOAActivity_Activity"),
                    l => l.HasOne<ClientPoa>().WithMany()
                        .HasForeignKey("PoaId")
                        .HasConstraintName("FK_ClientPOAActivity_ClientPOA"),
                    j =>
                    {
                        j.HasKey("PoaId", "ActivityId");
                        j.ToTable("ClientPOAActivity");
                    });
        });

        modelBuilder.Entity<CompanyContacts>(entity =>
        {
            entity.HasKey(e => e.ContactId);

            entity.Property(e => e.ContactId).HasColumnName("ContactID");
            entity.Property(e => e.Aanspreking).HasMaxLength(50);
            entity.Property(e => e.CompanyId).HasColumnName("CompanyID");
            entity.Property(e => e.ContactNaam)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.ContactVoornaam).HasMaxLength(250);
            entity.Property(e => e.DepartmentId).HasColumnName("DepartmentID");
            entity.Property(e => e.Email).HasMaxLength(250);
            entity.Property(e => e.Fax).HasMaxLength(50);
            entity.Property(e => e.Functie).HasMaxLength(100);
            entity.Property(e => e.Gsm)
                .HasMaxLength(50)
                .HasColumnName("GSM");
            entity.Property(e => e.Telefoon).HasMaxLength(50);

            entity.HasOne(d => d.Company).WithMany(p => p.CompanyContacts)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("FK_CompanyContacts_CompanyInfo");

            entity.HasOne(d => d.Department).WithMany(p => p.CompanyContacts)
                .HasForeignKey(d => d.DepartmentId)
                .HasConstraintName("FK_CompanyContacts_CompanyDepartments");
        });

        modelBuilder.Entity<CompanyDepartments>(entity =>
        {
            entity.HasKey(e => e.DepartmentId);

            entity.Property(e => e.Bus).HasMaxLength(10);
            entity.Property(e => e.Gsm)
                .HasMaxLength(50)
                .HasColumnName("GSM");
            entity.Property(e => e.Huisnummer).HasMaxLength(10);
            entity.Property(e => e.Naam).HasMaxLength(50);
            entity.Property(e => e.Straat).HasMaxLength(50);
            entity.Property(e => e.Telefoon).HasMaxLength(50);

            entity.HasOne(d => d.Company).WithMany(p => p.CompanyDepartments)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("FK_CompanyDepartments_CompanyInfo");

            entity.HasOne(d => d.Postcode).WithMany(p => p.CompanyDepartments)
                .HasForeignKey(d => d.PostcodeId)
                .HasConstraintName("FK_CompanyDepartments_PostalCode");
        });

        modelBuilder.Entity<CompanyInfo>(entity =>
        {
            entity.HasKey(e => e.CompanyId);

            entity.Property(e => e.CompanyId).HasColumnName("CompanyID");
            entity.Property(e => e.Bank).HasMaxLength(50);
            entity.Property(e => e.BedrijfsNaam).HasMaxLength(250);
            entity.Property(e => e.Busnummer).HasMaxLength(50);
            entity.Property(e => e.Email).HasMaxLength(300);
            entity.Property(e => e.Fax1).HasMaxLength(50);
            entity.Property(e => e.Fax2).HasMaxLength(50);
            entity.Property(e => e.Gemeente).HasMaxLength(250);
            entity.Property(e => e.Gsm)
                .HasMaxLength(50)
                .HasColumnName("GSM");
            entity.Property(e => e.Huisnummer).HasMaxLength(50);
            entity.Property(e => e.LandCode).HasMaxLength(3);
            entity.Property(e => e.Ondernemingsnummer).HasMaxLength(50);
            entity.Property(e => e.PostCodeId).HasColumnName("PostCodeID");
            entity.Property(e => e.Postcode).HasMaxLength(50);
            entity.Property(e => e.RegistratieNr).HasMaxLength(50);
            entity.Property(e => e.Straat).HasMaxLength(250);
            entity.Property(e => e.Telefoon1).HasMaxLength(50);
            entity.Property(e => e.Telefoon2).HasMaxLength(50);
            entity.Property(e => e.Toevoeging).HasMaxLength(50);
            entity.Property(e => e.Type).HasMaxLength(50);
            entity.Property(e => e.Weburl)
                .HasMaxLength(300)
                .HasColumnName("WEBURL");

            entity.HasOne(d => d.PostCode).WithMany(p => p.CompanyInfo)
                .HasForeignKey(d => d.PostCodeId)
                .HasConstraintName("FK_CompanyInfo_PostalCode");

            entity.HasMany(d => d.Activity).WithMany(p => p.Company)
                .UsingEntity<Dictionary<string, object>>(
                    "CompanyActivity",
                    r => r.HasOne<Activity>().WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CompanyActivity_Activity"),
                    l => l.HasOne<CompanyInfo>().WithMany()
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_CompanyActivity_CompanyInfo"),
                    j =>
                    {
                        j.HasKey("CompanyId", "ActivityId");
                        j.IndexerProperty<int>("CompanyId").HasColumnName("CompanyID");
                        j.IndexerProperty<int>("ActivityId").HasColumnName("ActivityID");
                    });

            entity.HasMany(d => d.Project).WithMany(p => p.Company)
                .UsingEntity<Dictionary<string, object>>(
                    "CustomerProject",
                    r => r.HasOne<Project>().WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CustomerProject_Project"),
                    l => l.HasOne<CompanyInfo>().WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_CustomerProject_CompanyInfo"),
                    j =>
                    {
                        j.HasKey("CompanyId", "ProjectId");
                        j.IndexerProperty<int>("CompanyId").HasColumnName("CompanyID");
                        j.IndexerProperty<int>("ProjectId").HasColumnName("ProjectID");
                    });
        });

        modelBuilder.Entity<Contract>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CashDiscountPaymentTerm).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.CashDiscountPercentage).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.CompanyId).HasColumnName("CompanyID");
            entity.Property(e => e.GuaranteePercentage).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.PaymentTerm).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.VatPercentage).HasColumnType("numeric(18, 0)");

            entity.HasOne(d => d.Company).WithMany(p => p.Contract)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Contract_CompanyInfo");

            entity.HasOne(d => d.Project).WithMany(p => p.Contract)
                .HasForeignKey(d => d.ProjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Contract_Project");
        });

        modelBuilder.Entity<ContractActivity>(entity =>
        {
            entity.HasIndex(e => e.Id, "IX_ContractActivity");

            entity.Property(e => e.ActivityId).HasColumnName("ActivityID");
            entity.Property(e => e.ContractId).HasColumnName("ContractID");
            entity.Property(e => e.Description).HasMaxLength(200);
            entity.Property(e => e.Price).HasColumnType("decimal(19, 4)");

            entity.HasOne(d => d.Activity).WithMany(p => p.ContractActivity)
                .HasForeignKey(d => d.ActivityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ContractActivity_Activity");

            entity.HasOne(d => d.Contract).WithMany(p => p.ContractActivity)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_ContractActivity_Contract1");
        });

        modelBuilder.Entity<Country>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.LandIsocode)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("LandISOCode");
            entity.Property(e => e.LandNaam).HasMaxLength(50);
        });

        modelBuilder.Entity<IncommingInvoiceDetail>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.ActId).HasColumnName("ActID");
            entity.Property(e => e.ChangeOrderId).HasColumnName("ChangeOrderID");
            entity.Property(e => e.ContractActId).HasColumnName("ContractActID");
            entity.Property(e => e.Description).HasMaxLength(250);
            entity.Property(e => e.IncommingInvoiceId).HasColumnName("IncommingInvoiceID");
            entity.Property(e => e.Price).HasColumnType("decimal(19, 4)");
            entity.Property(e => e.Type).HasColumnType("numeric(18, 0)");

            entity.HasOne(d => d.Act).WithMany(p => p.IncommingInvoiceDetail)
                .HasForeignKey(d => d.ActId)
                .HasConstraintName("FK_IncommingInvoiceDetail_Activity");

            entity.HasOne(d => d.ChangeOrder).WithMany(p => p.IncommingInvoiceDetail)
                .HasForeignKey(d => d.ChangeOrderId)
                .HasConstraintName("FK_IncommingInvoiceDetail_ChangeOrder");

            entity.HasOne(d => d.ContractAct).WithMany(p => p.IncommingInvoiceDetail)
                .HasForeignKey(d => d.ContractActId)
                .HasConstraintName("FK_IncommingInvoiceDetail_ContractActivity");

            entity.HasOne(d => d.IncommingInvoice).WithMany(p => p.IncommingInvoiceDetail)
                .HasForeignKey(d => d.IncommingInvoiceId)
                .HasConstraintName("FK_IncommingInvoiceDetail_IncommingInvoices1");
        });

        modelBuilder.Entity<IncommingInvoices>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CompanyId).HasColumnName("CompanyID");
            entity.Property(e => e.ContractId).HasColumnName("ContractID");
            entity.Property(e => e.ExternalId)
                .HasMaxLength(250)
                .HasColumnName("ExternalID");
            entity.Property(e => e.Price).HasColumnType("decimal(19, 4)");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");

            entity.HasOne(d => d.Company).WithMany(p => p.IncommingInvoices)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("FK_IncommingInvoices_CompanyInfo");

            entity.HasOne(d => d.Contract).WithMany(p => p.IncommingInvoices)
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_IncommingInvoices_Contract");

            entity.HasOne(d => d.Project).WithMany(p => p.IncommingInvoices)
                .HasForeignKey(d => d.ProjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_IncommingInvoices_Project");
        });

        modelBuilder.Entity<InsuranceCompanies>(entity =>
        {
            entity.Property(e => e.Busnummer).HasMaxLength(50);
            entity.Property(e => e.Huisnummer).HasMaxLength(50);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.PostcodeId).HasColumnName("PostcodeID");
            entity.Property(e => e.Straat)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.Toevoeging).HasMaxLength(50);

            entity.HasOne(d => d.Postcode).WithMany(p => p.InsuranceCompanies)
                .HasForeignKey(d => d.PostcodeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InsuranceCompanies_PostalCode");
        });

        modelBuilder.Entity<Insurances>(entity =>
        {
            entity.HasKey(e => e.ContractActivityId).HasName("PK_Insurances_1");

            entity.Property(e => e.ContractActivityId)
                .ValueGeneratedNever()
                .HasColumnName("ContractActivityID");
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.InsuranceCompanyId).HasColumnName("InsuranceCompanyID");

            entity.HasOne(d => d.ContractActivity).WithOne(p => p.Insurances)
                .HasForeignKey<Insurances>(d => d.ContractActivityId)
                .HasConstraintName("FK_Insurances_ContractActivity");

            entity.HasOne(d => d.InsuranceCompany).WithMany(p => p.Insurances)
                .HasForeignKey(d => d.InsuranceCompanyId)
                .HasConstraintName("FK_Insurances_InsuranceCompanies");
        });

        modelBuilder.Entity<Invoices>(entity =>
        {
            entity.Property(e => e.Adress).HasMaxLength(200);
            entity.Property(e => e.BankAccount).HasMaxLength(50);
            entity.Property(e => e.ClientName).HasMaxLength(200);
            entity.Property(e => e.CompanyId).HasColumnName("CompanyID");
            entity.Property(e => e.ExtraInfo).HasMaxLength(1000);
            entity.Property(e => e.Filename)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.PostalCodeId).HasColumnName("PostalCodeID");
            entity.Property(e => e.PublicId).HasMaxLength(50);
            entity.Property(e => e.VatNumber).HasMaxLength(50);

            entity.HasOne(d => d.PostalCode).WithMany(p => p.Invoices)
                .HasForeignKey(d => d.PostalCodeId)
                .HasConstraintName("FK_Invoices_PostalCode");
        });

        modelBuilder.Entity<InvoicesDetails>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_InvoicesStages_1");

            entity.Property(e => e.GroupName).HasMaxLength(200);
            entity.Property(e => e.Price).HasColumnType("decimal(19, 4)");
            entity.Property(e => e.Text).HasMaxLength(200);
            entity.Property(e => e.VatPercentage).HasColumnType("decimal(19, 4)");

            entity.HasOne(d => d.Invoice).WithMany(p => p.InvoicesDetails)
                .HasForeignKey(d => d.InvoiceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InvoicesStages_Invoices");

            entity.HasOne(d => d.PaymentStage).WithMany(p => p.InvoicesDetails)
                .HasForeignKey(d => d.PaymentStageId)
                .HasConstraintName("FK_InvoicesStages_InvoicingPaymentStages");

            entity.HasOne(d => d.Unit).WithMany(p => p.InvoicesDetails)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_InvoicesStages_Units");
        });

        modelBuilder.Entity<InvoicingPaymentGroup>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.VatPercentage).HasColumnType("decimal(19, 4)");

            entity.HasOne(d => d.Project).WithMany(p => p.InvoicingPaymentGroup)
                .HasForeignKey(d => d.ProjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InvoicingPaymentGroup_Project");
        });

        modelBuilder.Entity<InvoicingPaymentStages>(entity =>
        {
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Percentage).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.VatPercentage).HasColumnType("decimal(18, 4)");

            entity.HasOne(d => d.Doc).WithMany(p => p.InvoicingPaymentStages)
                .HasForeignKey(d => d.DocId)
                .HasConstraintName("FK_InvoicingPaymentStages_ProjectDocs");

            entity.HasOne(d => d.Group).WithMany(p => p.InvoicingPaymentStages)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_InvoicingPaymentStages_InvoicingPaymentGroup");
        });

        modelBuilder.Entity<MigrationHistory>(entity =>
        {
            entity.HasKey(e => new { e.MigrationId, e.ContextKey }).HasName("PK_dbo.__MigrationHistory");

            entity.ToTable("__MigrationHistory");

            entity.Property(e => e.MigrationId).HasMaxLength(150);
            entity.Property(e => e.ContextKey).HasMaxLength(300);
            entity.Property(e => e.Model).IsRequired();
            entity.Property(e => e.ProductVersion)
                .IsRequired()
                .HasMaxLength(32);
        });

        modelBuilder.Entity<Permission>(entity =>
        {
            entity.HasKey(e => e.PermissionId).HasName("PK_Permissions");

            entity.Property(e => e.PermissionId)
                .ValueGeneratedNever()
                .HasColumnName("PermissionID");
            entity.Property(e => e.PermissionName).HasMaxLength(50);
        });

        modelBuilder.Entity<PermissionPerUser>(entity =>
        {
            entity.HasKey(e => new { e.PermissionId, e.UserId });

            entity.Property(e => e.PermissionId).HasColumnName("PermissionID");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.PermissionNavigation).WithMany(p => p.PermissionPerUser)
                .HasForeignKey(d => d.PermissionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PermissionPerUser_Permissions");

            entity.HasOne(d => d.User).WithMany(p => p.PermissionPerUser)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PermissionPerUser_Users");
        });

        modelBuilder.Entity<PostalCode>(entity =>
        {
            entity.HasKey(e => e.PostcodeId)
                .HasName("PK_POSTCODE")
                .HasAnnotation("SqlServer:FillFactor", 80);

            entity.Property(e => e.PostcodeId).HasColumnName("PostcodeID");
            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.Gemeente)
                .IsRequired()
                .HasMaxLength(35)
                .IsUnicode(false);
            entity.Property(e => e.Postcode)
                .IsRequired()
                .HasMaxLength(12)
                .IsUnicode(false);
            entity.Property(e => e.ProvincieId).HasColumnName("ProvincieID");

            entity.HasOne(d => d.Country).WithMany(p => p.PostalCode)
                .HasForeignKey(d => d.CountryId)
                .HasConstraintName("FK_PostalCode_Country");

            entity.HasOne(d => d.Provincie).WithMany(p => p.PostalCode)
                .HasForeignKey(d => d.ProvincieId)
                .HasConstraintName("FK_PostalCode_Provincie");
        });

        modelBuilder.Entity<Project>(entity =>
        {
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");
            entity.Property(e => e.ArchitectId).HasColumnName("ArchitectID");
            entity.Property(e => e.AspNetUserId)
                .HasMaxLength(128)
                .HasColumnName("AspNetUserID");
            entity.Property(e => e.BuilderId).HasColumnName("BuilderID");
            entity.Property(e => e.CommercialTextNl).HasColumnName("CommercialTextNL");
            entity.Property(e => e.CommercialTitleNl)
                .HasMaxLength(100)
                .HasColumnName("CommercialTitleNL");
            entity.Property(e => e.DeveloperId).HasColumnName("DeveloperID");
            entity.Property(e => e.DocPid).HasColumnName("DocPID");
            entity.Property(e => e.EngineerId).HasColumnName("EngineerID");
            entity.Property(e => e.EpbReporterId).HasColumnName("EpbReporterID");
            entity.Property(e => e.FacebookAlbumId)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("FacebookAlbumID");
            entity.Property(e => e.FacebookPlaceId).HasMaxLength(128);
            entity.Property(e => e.Number).HasMaxLength(10);
            entity.Property(e => e.PostalCodeId).HasColumnName("PostalCodeID");
            entity.Property(e => e.ProjectName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.SecurityCoordinatorId).HasColumnName("SecurityCoordinatorID");
            entity.Property(e => e.Slug).HasMaxLength(50);
            entity.Property(e => e.StatusId).HasColumnName("StatusID");
            entity.Property(e => e.Street).HasMaxLength(100);
            entity.Property(e => e.TotalLandShare).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.WheaterStationId).HasColumnName("WheaterStationID");

            entity.HasOne(d => d.Architect).WithMany(p => p.ProjectArchitect)
                .HasForeignKey(d => d.ArchitectId)
                .HasConstraintName("FK_Project_CompanyInfo4");

            entity.HasOne(d => d.AspNetUser).WithMany(p => p.Project)
                .HasForeignKey(d => d.AspNetUserId)
                .HasConstraintName("FK_Project_AspNetUsers");

            entity.HasOne(d => d.Builder).WithMany(p => p.ProjectBuilder)
                .HasForeignKey(d => d.BuilderId)
                .HasConstraintName("FK_Project_CompanyInfo5");

            entity.HasOne(d => d.DefaultPicture).WithMany(p => p.Project)
                .HasForeignKey(d => d.DefaultPictureId)
                .HasConstraintName("FK_Project_ProjectPictures");

            entity.HasOne(d => d.Developer).WithMany(p => p.ProjectDeveloper)
                .HasForeignKey(d => d.DeveloperId)
                .HasConstraintName("FK_Project_CompanyInfo");

            entity.HasOne(d => d.Engineer).WithMany(p => p.ProjectEngineer)
                .HasForeignKey(d => d.EngineerId)
                .HasConstraintName("FK_Project_CompanyInfo1");

            entity.HasOne(d => d.EpbReporter).WithMany(p => p.ProjectEpbReporter)
                .HasForeignKey(d => d.EpbReporterId)
                .HasConstraintName("FK_Project_CompanyInfo3");

            entity.HasOne(d => d.PostalCode).WithMany(p => p.Project)
                .HasForeignKey(d => d.PostalCodeId)
                .HasConstraintName("FK_Project_PostalCode");

            entity.HasOne(d => d.SecurityCoordinator).WithMany(p => p.ProjectSecurityCoordinator)
                .HasForeignKey(d => d.SecurityCoordinatorId)
                .HasConstraintName("FK_Project_CompanyInfo2");

            entity.HasOne(d => d.Status).WithMany(p => p.Project)
                .HasForeignKey(d => d.StatusId)
                .HasConstraintName("FK_Project_ProjectStatus");

            entity.HasOne(d => d.WheaterStation).WithMany(p => p.Project)
                .HasForeignKey(d => d.WheaterStationId)
                .HasConstraintName("FK_Project_WheaterStations");
        });

        modelBuilder.Entity<ProjectBudget>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.ActivityId).HasColumnName("ActivityID");
            entity.Property(e => e.Price).HasColumnType("decimal(19, 4)");
            entity.Property(e => e.ProjectId).HasColumnName("ProjectID");

            entity.HasOne(d => d.Activity).WithMany(p => p.ProjectBudget)
                .HasForeignKey(d => d.ActivityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectBudget_Activity");

            entity.HasOne(d => d.Project).WithMany(p => p.ProjectBudget)
                .HasForeignKey(d => d.ProjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectBudget_Project");
        });

        modelBuilder.Entity<ProjectDocs>(entity =>
        {
            entity.Property(e => e.Filename)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Name).HasMaxLength(200);

            entity.HasOne(d => d.ClientAccount).WithMany(p => p.ProjectDocs)
                .HasForeignKey(d => d.ClientAccountId)
                .HasConstraintName("FK_ProjectDocs_ClientAccount");

            entity.HasOne(d => d.Project).WithMany(p => p.ProjectDocs)
                .HasForeignKey(d => d.ProjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectDocs_Project");
        });

        modelBuilder.Entity<ProjectLevels>(entity =>
        {
            entity.Property(e => e.Level)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Project).WithMany(p => p.ProjectLevels)
                .HasForeignKey(d => d.ProjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectLevels_Project");
        });

        modelBuilder.Entity<ProjectNews>(entity =>
        {
            entity.Property(e => e.Author).HasMaxLength(50);
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.TextNl)
                .IsRequired()
                .HasColumnName("TextNL");
            entity.Property(e => e.TitleNl)
                .IsRequired()
                .HasColumnName("TitleNL");

            entity.HasOne(d => d.Picture).WithMany(p => p.ProjectNews)
                .HasForeignKey(d => d.PictureId)
                .HasConstraintName("FK_ProjectNews_ProjectPictures");

            entity.HasOne(d => d.Project).WithMany(p => p.ProjectNews)
                .HasForeignKey(d => d.ProjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectNews_Project");
        });

        modelBuilder.Entity<ProjectPictures>(entity =>
        {
            entity.Property(e => e.FacebookIdCopro).HasMaxLength(50);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.ProjectNavigation).WithMany(p => p.ProjectPictures)
                .HasForeignKey(d => d.ProjectId)
                .HasConstraintName("FK_ProjectPictures_Project");
        });

        modelBuilder.Entity<ProjectSalesSettings>(entity =>
        {
            entity.Property(e => e.BankAccountNumber).HasMaxLength(50);
            entity.Property(e => e.BaseCertificateCost).HasColumnType("decimal(19, 4)");
            entity.Property(e => e.ConnectionFees).HasColumnType("decimal(19, 4)");
            entity.Property(e => e.FixedCertificateCost).HasColumnType("decimal(19, 4)");
            entity.Property(e => e.MixedVatregistration).HasColumnName("MixedVATRegistration");
            entity.Property(e => e.MortageRegistrationCost).HasColumnType("decimal(19, 4)");
            entity.Property(e => e.ParcelCost).HasColumnType("decimal(19, 4)");
            entity.Property(e => e.RegistrationPercentage).HasColumnType("decimal(19, 4)");
            entity.Property(e => e.SurveyorCost).HasColumnType("decimal(19, 4)");
            entity.Property(e => e.Vatpercentage)
                .HasColumnType("decimal(19, 4)")
                .HasColumnName("VATPercentage");

            entity.HasOne(d => d.Project).WithMany(p => p.ProjectSalesSettings)
                .HasForeignKey(d => d.Projectid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ProjectSalesSettings_Project");
        });

        modelBuilder.Entity<ProjectStatus>(entity =>
        {
            entity.HasKey(e => e.StatusId);

            entity.Property(e => e.StatusId).HasColumnName("StatusID");
            entity.Property(e => e.StatusName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Provincie>(entity =>
        {
            entity.Property(e => e.ProvincieId).HasColumnName("ProvincieID");
            entity.Property(e => e.CountryId).HasColumnName("CountryID");
            entity.Property(e => e.ProvincieName).HasMaxLength(150);

            entity.HasOne(d => d.Country).WithMany(p => p.Provincie)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Provincie_Country");
        });

        modelBuilder.Entity<Setting>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.SettingId).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.SettingName).HasMaxLength(50);
            entity.Property(e => e.ValueNum).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.ValueString).HasMaxLength(250);
        });

        modelBuilder.Entity<UnitConstructionValue>(entity =>
        {
            entity.Property(e => e.Description).HasMaxLength(250);
            entity.Property(e => e.Value).HasColumnType("decimal(19, 4)");
            entity.Property(e => e.ValueSold).HasColumnType("decimal(19, 4)");

            entity.HasOne(d => d.PaymentGroup).WithMany(p => p.UnitConstructionValue)
                .HasForeignKey(d => d.PaymentGroupId)
                .HasConstraintName("FK_UnitConstructionValue_InvoicingPaymentGroup");

            entity.HasOne(d => d.Unit).WithMany(p => p.UnitConstructionValue)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_UnitConstructionValue_Units");
        });

        modelBuilder.Entity<UnitGroupTypes>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<UnitRooms>(entity =>
        {
            entity.HasKey(e => e.RoomId);

            entity.Property(e => e.Remark).HasMaxLength(250);
            entity.Property(e => e.Surface).HasColumnType("decimal(5, 2)");

            entity.HasOne(d => d.Unit).WithMany(p => p.UnitRooms)
                .HasForeignKey(d => d.UnitId)
                .HasConstraintName("FK_UnitRooms_Units");
        });

        modelBuilder.Entity<UnitTypes>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.GroupId).HasColumnName("GroupID");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Shortcode)
                .HasMaxLength(3)
                .IsFixedLength();

            entity.HasOne(d => d.Group).WithMany(p => p.UnitTypes)
                .HasForeignKey(d => d.GroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UnitTypes_UnitGroupTypes");
        });

        modelBuilder.Entity<Units>(entity =>
        {
            entity.Property(e => e.Busnumber).HasMaxLength(10);
            entity.Property(e => e.ClientAccountId).HasColumnName("ClientAccountID");
            entity.Property(e => e.ConstructionValue).HasColumnType("decimal(19, 4)");
            entity.Property(e => e.ConstructionValueSold).HasColumnType("decimal(19, 4)");
            entity.Property(e => e.GroundSurface).HasColumnType("decimal(6, 2)");
            entity.Property(e => e.Housenumber).HasMaxLength(10);
            entity.Property(e => e.LandValue).HasColumnType("decimal(19, 4)");
            entity.Property(e => e.LandValueSold).HasColumnType("decimal(19, 4)");
            entity.Property(e => e.Landshare).HasColumnType("numeric(18, 0)");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Plan).HasMaxLength(50);
            entity.Property(e => e.PreKad).HasMaxLength(50);
            entity.Property(e => e.Street).HasMaxLength(200);
            entity.Property(e => e.Surface).HasColumnType("decimal(5, 2)");

            entity.HasOne(d => d.AttachedUnit).WithMany(p => p.InverseAttachedUnit)
                .HasForeignKey(d => d.AttachedUnitId)
                .HasConstraintName("FK_Units_Units");

            entity.HasOne(d => d.ClientAccount).WithMany(p => p.Units)
                .HasForeignKey(d => d.ClientAccountId)
                .HasConstraintName("FK_Units_ClientAccount");

            entity.HasOne(d => d.LandValueInvoice).WithMany(p => p.Units)
                .HasForeignKey(d => d.LandValueInvoiceId)
                .HasConstraintName("FK_Units_Invoices");

            entity.HasOne(d => d.LevelNavigation).WithMany(p => p.Units)
                .HasForeignKey(d => d.LevelId)
                .HasConstraintName("FK_Units_ProjectLevels");

            entity.HasOne(d => d.LinkedUnit).WithMany(p => p.InverseLinkedUnit)
                .HasForeignKey(d => d.LinkedUnitId)
                .HasConstraintName("FK_Units_LinkedUnits");

            entity.HasOne(d => d.PaymentGroup).WithMany(p => p.Units)
                .HasForeignKey(d => d.PaymentGroupId)
                .HasConstraintName("FK_Units_InvoicingPaymentGroup");

            entity.HasOne(d => d.Project).WithMany(p => p.Units)
                .HasForeignKey(d => d.ProjectId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Units_Project");

            entity.HasOne(d => d.Type).WithMany(p => p.Units)
                .HasForeignKey(d => d.TypeId)
                .HasConstraintName("FK_Units_UnitTypes");
        });

        modelBuilder.Entity<UserCompany>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.UserCompanyId)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("UserCompanyID");
            entity.Property(e => e.UserCompanyName).HasMaxLength(100);
        });

        modelBuilder.Entity<Users>(entity =>
        {
            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("ID");
            entity.Property(e => e.Familienaam).HasMaxLength(100);
            entity.Property(e => e.Functie).HasMaxLength(100);
            entity.Property(e => e.Gsm)
                .HasMaxLength(50)
                .HasColumnName("GSM");
            entity.Property(e => e.Initiaal).HasMaxLength(50);
            entity.Property(e => e.Password).HasMaxLength(50);
            entity.Property(e => e.Type).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.UserId)
                .HasMaxLength(50)
                .HasColumnName("UserID");
            entity.Property(e => e.Voornaam).HasMaxLength(50);
        });

        modelBuilder.Entity<UtilityPercentage>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Percentage).HasColumnType("decimal(18, 0)");

            entity.HasOne(d => d.ClientAccount).WithMany()
                .HasForeignKey(d => d.ClientAccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UtilityPercentage_ClientAccount");

            entity.HasOne(d => d.Contract).WithMany()
                .HasForeignKey(d => d.ContractId)
                .HasConstraintName("FK_UtilityPercentage_Contract");

            entity.HasOne(d => d.IncommingInvoiceDetail).WithMany()
                .HasForeignKey(d => d.IncommingInvoiceDetailId)
                .HasConstraintName("FK_UtilityPercentage_IncommingInvoiceDetail");
        });

        modelBuilder.Entity<VacationDays>(entity =>
        {
            entity.HasOne(d => d.Project).WithMany(p => p.VacationDays)
                .HasForeignKey(d => d.ProjectId)
                .HasConstraintName("FK_VacationDays_Project");
        });

        modelBuilder.Entity<Vattype>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("VATtype");

            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.Vatpercentage).HasColumnName("VATpercentage");
            entity.Property(e => e.Vattext)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("VATtext");
        });

        modelBuilder.Entity<WheaterStations>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Latitude)
                .HasColumnType("decimal(9, 6)")
                .HasColumnName("latitude");
            entity.Property(e => e.Longitude)
                .HasColumnType("decimal(9, 6)")
                .HasColumnName("longitude");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}