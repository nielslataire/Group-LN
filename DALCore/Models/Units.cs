// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using BOCore;

namespace DALCore.Models;

public partial class Units
{
    public int Id { get; set; }

    public string Name { get; set; }

    public int? TypeId { get; set; }

    public int ProjectId { get; set; }

    public decimal? Landshare { get; set; }

    public int? LevelId { get; set; }

    public int? ClientAccountId { get; set; }

    public string Street { get; set; }

    public string Housenumber { get; set; }

    public string Busnumber { get; set; }

    public string PreKad { get; set; }

    public decimal? ConstructionValueSold { get; set; }

    public decimal? LandValueSold { get; set; }

    public decimal? ConstructionValue { get; set; }

    public decimal? LandValue { get; set; }

    public int? AttachedUnitId { get; set; }

    public int? LinkedUnitId { get; set; }

    public bool IsLink { get; set; }

    public decimal? Surface { get; set; }

    public int? Level { get; set; }

    public string Plan { get; set; }

    public int? PaymentGroupId { get; set; }

    public decimal? GroundSurface { get; set; }

    public int? ConstructionValueId { get; set; }

    public int? LandValueInvoiceId { get; set; }

    public virtual Units AttachedUnit { get; set; }

    public virtual ClientAccount ClientAccount { get; set; }

    public virtual ICollection<Units> InverseAttachedUnit { get; set; } = new List<Units>();

    public virtual ICollection<Units> InverseLinkedUnit { get; set; } = new List<Units>();

    public virtual ICollection<InvoicesDetails> InvoicesDetails { get; set; } = new List<InvoicesDetails>();

    public virtual Invoices LandValueInvoice { get; set; }

    public virtual ProjectLevels LevelNavigation { get; set; }

    public virtual Units LinkedUnit { get; set; }

    public virtual InvoicingPaymentGroup PaymentGroup { get; set; }

    public virtual Project Project { get; set; }

    public virtual UnitTypes Type { get; set; }

    public virtual ICollection<UnitConstructionValue> UnitConstructionValue { get; set; } = new List<UnitConstructionValue>();

    public virtual ICollection<UnitRooms> UnitRooms { get; set; } = new List<UnitRooms>();
    public IdNameBO GetIdName()
    {
        IdNameBO bo = new IdNameBO();
        bo.ID = this.Id;
        if (this.Type != null && this.Type.Id == 11)
            bo.Display = this.Type.Name + " " + this.Name;
        else
            bo.Display = this.Name;
        bo.Group = this.Type.Group.Name;
        return bo;
    }

}